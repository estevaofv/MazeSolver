
#include "NanoMouseMotors.h"
#include <Ardumoto.h>


//#define DEBUG         // uncomment this statement if serial debug output needed


/* ============================= Line Follower ============================= */


NanoMouseMotors motors;

//#define RIGHT_HEADLIGHT 4
//#define LEFT_HEADLIGHT 5

#define NUM_SENSORS  5
#define led 9
#define ledRightTurn 7
#define ledLeftTurn  8
#define M1_DEFAULT_SPEED 20   // Right default motor speed
#define M2_DEFAULT_SPEED 20   // Left default motor speed

#define M1_MAX_SPEED 30       // Right max motor speed
#define M2_MAX_SPEED 30       // Left max motor speed

boolean b_sensor[NUM_SENSORS];     // variable for holding current sensor readings  //if using digital method

int thresholdValue = 800;

int leapTime = 100;

int calmax[NUM_SENSORS];   // Array used to store max readings for sensors.
int calmin[NUM_SENSORS];   // Array used to store min readings for sensors.
int velPos = 27;
int velNeg = -27; //-28

int tempTurn = 0;
int leftRight = 0;
int oLeft = 0;
int oRight = 0;

char path[100] = {};
int pathLength;
int readLength;

int leftNudge;
int replaystage;
int rightNudge;
const byte buttonPin = 4;


/* ============================= Audio ============================= */
#define SPEAKER_OUT 6

#define mC 1911
#define mC1 1804
#define mD 1703
#define mEb 1607
#define mE 1517
#define mF 1432
#define mF1 1352
#define mG 1276
#define mAb 1204
#define mA 1136
#define mBb 1073
#define mB 1012
#define mB2 2028
#define mc 955
#define mc1 902
#define md 851
#define meb 803
#define me 758
#define mf 716
#define mf1 676
#define mg 638
#define mab 602
#define ma 568
#define mbb 536
#define mb 506
#define mC2 3830
#define mR 0


#define mp 0  //pause


// MELODY and TIMING  =======================================
//  melody[] is an array of notes, accompanied by beats[],
//  which sets each note's relative length (higher #, longer note)
/*
  int melody[] = {mB, mB2, mF1, mEb,  mB, mF1,  mEb, mf1, mR,
                mC, mC2,  mG,  mE,  mC,  mG,   mE,  mg, mR,
                mB, mB2, mF1, mEb,  mB, mF1,  mEb, mf1, mR,
                mE, mF,  mF1, mG,  mAb,  mA,  mBb, mB , mR};

  // note durations: 4 = quarter note, 8 = eighth note, etc.:
  int beats[]  = {12, 12, 12, 12,  12,  12,  12, 12, 1,
                  12, 12, 12, 12,  12,  12,  12, 12, 1,
                  12, 12, 12, 12,  12,  12,  12, 12, 1,
                  12, 12, 12, 12,  12,  12,  12, 12, 1};
*/
int melody[] = {mC1, mAb  , mC1, mF1, mBb, mEb, mBb, mEb, mBb, mEb, mR};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int beats[]  = {12, 12, 12, 12,  12,  12, 12, 12, 12 , 12,  1 };

int MAX_COUNT = sizeof(melody) / sizeof(int); // Melody length, for looping.

// Set overall tempo
long tempo = 10000;
// Set length of pause between notes
int pause = 1000;
// Loop variable to increase Rest length
int rest_count = 100; //<-BLETCHEROUS HACK; See NOTES

// Initialize core variables
int tone_ = 0;
int beat = 0;
long duration  = 0;

//**************************************************************************************************************************************
float Kp = 0.8 , Ki = 0, Kd = 0.75;// 0.75
float error = 0, P = 0, I = 0, D = 0, PID_value = 0;
float previous_error = 0, previous_I = 0;
int sensors[5] = {0, 0, 0, 0, 0};
int initial_motor_speed = 14;//test anterior

void read_sensor_values(void);
void calculate_pid(void);
void motor_control(void);


//***********************************************************************************************************************************************************



//rolls first than colunns




//**********************************************************************************************************************************************************
void setup()
{
  pinMode(buttonPin, INPUT_PULLUP);

  pinMode(led, OUTPUT);
  pinMode(ledRightTurn, OUTPUT);
  pinMode(ledLeftTurn, OUTPUT);
  //Serial.begin(115200);
  digitalWrite(led, HIGH);
  digitalWrite(ledRightTurn, HIGH);
  digitalWrite(ledLeftTurn, HIGH);
  delay(1000);
  digitalWrite(ledRightTurn, LOW);
  digitalWrite(ledLeftTurn, LOW);
  Serial.begin(115200);

  // initialize the motor pins as output:
  motors.mBegin();

  // Initialize the LED headlight pin as an output:
  //  pinMode(RIGHT_HEADLIGHT, OUTPUT);
  //  pinMode(LEFT_HEADLIGHT, OUTPUT);

  // Turn off headlights
  // digitalWrite(RIGHT_HEADLIGHT, HIGH);
  // digitalWrite(LEFT_HEADLIGHT, HIGH);

  // Initialize the speaker pin as an output:
  pinMode(SPEAKER_OUT, OUTPUT);

  // Warning sound before motors activated
  for (int i = 0; i < 3; i++)
  {
    TriggerSound();
    delay(500);
  }


  // Rotate right and left on the spot
  for (int counter = 0; counter < 200; counter++)
  {
    /*
      if(counter < 25 || counter >= 75)
       set_motors(80,-80);
      else
       set_motors(-80,80);
    */
    // This function records a set of sensor readings and keeps track of the minimum and maximum values encountered.
    line_sensors_scan();

    delay(20);
  }


  //set_motors(0,0);
  motors.stop();
  for (int i = 0; i < 3; i++)
  {
    TriggerSound();
    delay(500);
  }

  while (digitalRead(buttonPin)) {}
  delay(1000);

#ifdef DEBUG
  Serial.println("Sensor Maximum Values");
  Serial.print(calmax[0]);
  Serial.print("\t");
  Serial.print(calmax[1]);
  Serial.print("\t");
  Serial.print(calmax[2]);
  Serial.print("\t");
  Serial.print(calmax[3]);
  Serial.print("\t");
  Serial.println(calmax[4]);
  Serial.println(" ");

  Serial.println("Sensor Minimum Values");
  Serial.print(calmin[0]);
  Serial.print("\t");
  Serial.print(calmin[1]);
  Serial.print("\t");
  Serial.print(calmin[2]);
  Serial.print("\t");
  Serial.print(calmin[3]);
  Serial.print("\t");
  Serial.println(calmin[4]);
  Serial.println(" ");
#endif



}



//**********************************************************************************************************************************************************
void loop()
{
  // Turn on headlights
  // digitalWrite(RIGHT_HEADLIGHT, LOW);
  // digitalWrite(LEFT_HEADLIGHT, LOW);

  straight();




}



//**********************************************************************************************************************************************************
void checkSensors()
{
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    sensors[i] = analogRead(i);    // Reading nearer to 1023 => light background, Reading nearer to 0 => dark background

    // Apply the calibration to the sensor reading
    sensors[i] = map(sensors[i], calmin[i], calmax[i], 0, 1000);

    // In case the sensor value is outside the range seen during calibration
    sensors[i] = constrain(sensors[i], 0, 1000);
  }

  for (int i = 0; i < NUM_SENSORS; i++)
  {
    if (sensors[i] <= thresholdValue)  // Dark background
      b_sensor[i] = 1;
    else
      b_sensor[i] = 0;                // Light background
  }


#ifdef DEBUG
  Serial.print(sensors[0]);
  Serial.print("\t");
  Serial.print(sensors[1]);
  Serial.print("\t");
  Serial.print(sensors[2]);
  Serial.print("\t");
  Serial.print(sensors[3]);
  Serial.print("\t");
  Serial.println(sensors[4]);

  Serial.print(b_sensor[0]);
  Serial.print("\t");
  Serial.print(b_sensor[1]);
  Serial.print("\t");
  Serial.print(b_sensor[2]);
  Serial.print("\t");
  Serial.print(b_sensor[3]);
  Serial.print("\t");
  Serial.println(b_sensor[4]);
  Serial.println(" ");
#endif
}



//**********************************************************************************************************************************************************
/*
  void set_motorsLF(int motor1speed, int motor2speed)     //set_motorsLF(int rightMotorSpeed, int leftmotorSpeed)
  {
  if (motor1speed > M1_MAX_SPEED ) motor1speed = M1_MAX_SPEED; // limit top speed
  if (motor2speed > M2_MAX_SPEED ) motor2speed = M2_MAX_SPEED; // limit top speed
  if (motor1speed < 0) motor1speed = 0; // keep motor speed above 0
  if (motor2speed < 0) motor2speed = 0; // keep motor speed above 0

  set_motors(motor1speed,motor2speed);
  }
*/


//**********************************************************************************************************************************************************
/*
  void set_motors(int rightMotorSpeed, int leftMotorSpeed)
  {
  if (rightMotorSpeed < 0)
  {
    analogWrite(MOTOR1_R,abs(rightMotorSpeed)); digitalWrite(MOTOR1_F,LOW);
  }
  else
  {
    analogWrite(MOTOR1_F,rightMotorSpeed);   digitalWrite(MOTOR1_R,LOW);
  }



  if (leftMotorSpeed < 0)
  {
    analogWrite(MOTOR2_R,abs(leftMotorSpeed)); digitalWrite(MOTOR2_F,LOW);
  }
  else
  {
    analogWrite(MOTOR2_F,leftMotorSpeed);   digitalWrite(MOTOR2_R,LOW);
  }
  }

*/

//**********************************************************************************************************************************************************
void line_sensors_scan()
{
  for (int i = 0; i < NUM_SENSORS; i++)
  {
    sensors[i] = analogRead(i);

    if (sensors[i] > calmax[i])
      calmax[i] = sensors[i];

    if (sensors[i] < calmin[i])
      calmin[i] = sensors[i];
  }
}



//**********************************************************************************************************************************************************
void TriggerSound()
{
  // Set up a counter to pull from melody[] and beats[]
  for (int i = 0; i < MAX_COUNT; i++) {
    tone_ = melody[i];
    beat = beats[i];

    duration = beat * tempo;

    playTone();
    delayMicroseconds(pause);
  }
}



//**********************************************************************************************************************************************************
// Pulse the speaker to play a tone for a particular duration
void playTone()
{
  long elapsed_time = 0;
  if (tone_ > 0) { // if this isn't a Rest beat, while the tone has
    //  played less long than 'duration', pulse speaker HIGH and LOW
    while (elapsed_time < duration) {


      digitalWrite(SPEAKER_OUT, HIGH);
      delayMicroseconds(tone_ / 2);

      // DOWN
      digitalWrite(SPEAKER_OUT, LOW);
      delayMicroseconds(tone_ / 2);

      // Keep track of how long we pulsed
      elapsed_time += (tone_);
    }
  }
  else { // Rest beat; loop times delay
    for (int j = 0; j < rest_count; j++) { // See NOTE on rest_count
      delayMicroseconds(duration);
    }
  }
}

//*********************************************************************************************************************
void read_sensor_values()
{
  checkSensors();

  if ((b_sensor[0] == 0) && (b_sensor[4] == 0)) {

    if ( (b_sensor[1] == 0) && (b_sensor[2] == 0) && (b_sensor[3] == 1))
      error = 3;
    else if ( (b_sensor[1] == 0) && (b_sensor[2] == 1) && (b_sensor[3] == 1))
      error = 1.5;
    else if ((b_sensor[1] == 0) && (b_sensor[2] == 1) && (b_sensor[3] == 0))
      error = 0;
    else if ((b_sensor[1] == 1) && (b_sensor[2] == 1) && (b_sensor[3] == 0))
      error = -1.5;
    else if ((b_sensor[1] == 1) && (b_sensor[2] == 0) && (b_sensor[3] == 0))
      error = -3;
    else if ((b_sensor[1] == 0) && (b_sensor[2] == 0) && (b_sensor[3] == 0)) {
      error = previous_error ;
      if ((b_sensor[0] == 1) && (b_sensor[4] == 1)) leftRight = 1;
      if ((b_sensor[0] == 1) && (b_sensor[4] == 0)) leftRight = 3;
      if ((b_sensor[0] == 0) && (b_sensor[4] == 1)) leftRight = 5;
      leftHandWall();
    }
  } else {
    if ((b_sensor[0] == 1) && (b_sensor[4] == 1)) leftRight = 1;
    if ((b_sensor[0] == 1) && (b_sensor[4] == 0)) leftRight = 3;
    if ((b_sensor[0] == 0) && (b_sensor[4] == 1)) leftRight = 5;
    leftHandWall();
  }

  //Serial.print(error);
  //Serial.print("");
  //Serial.print(previous_error);
  //delay (200);
}

//****************************************************************************************************************************************************
void calculate_pid()
{
  P = error;
  I = I + error;
  D = error - previous_error;

  PID_value = (Kp * P) + (Ki * I) + (Kd * D);

  previous_error = error;
}
//*****************************************************************************************************************************************************
void motor_control()
{
  // Calculating the effective motor speed:
  int left_motor_speed = initial_motor_speed - PID_value;
  int right_motor_speed = initial_motor_speed + PID_value;

  // The motor speed should not exceed the max PWM value
  constrain(left_motor_speed, 0, 100);
  constrain(right_motor_speed, 0, 100);

  motors.speedLeft(right_motor_speed);
  motors.speedRight(left_motor_speed);
  //analogWrite(9, left_motor_speed);  //Left Motor Speed
  //analogWrite(10, right_motor_speed); //Right Motor Speed
  //following lines of code are to make the bot move forward
  /*The pin numbers and high, low values might be different
    depending on your connections */

}
//*******************************************************************************************************************************************

void leftHandWall() {
  //    while (digitalRead(buttonPin)) {
  //      motors.stop();
  //   }
  //  motors.stop();
  //  delay(200);
  if ( leftRight == 1) {
    motors.forwardTime(200);//leap time
    delay(100);
    checkSensors();
    leftRight = 0;

    if ((b_sensor[0] == 1) && (b_sensor[4] == 1)) {
      done();
    }
    //pode virar para os dois lados e prefere virar para esquerda

    if ((b_sensor[0] == 0) && (b_sensor[4] == 0)) {
      turnLeft();

    }

  }
  //só pode virar para esquerda
  if (leftRight == 3) { // if you can turn left then turn left
    motors.forwardTime(200);//leap time
    delay(100);
    checkSensors();
    leftRight = 0;
    if ((b_sensor[0] == 0) && (b_sensor[4] == 0)) {
      turnLeft();

    }
    else {
      done();
    }
  }
  //pode virar para direita
  if (leftRight == 5) { // if you can turn left then turn left
    leftRight = 0;
    motors.forwardTime(20);//leap time // delay talvez tenha que ser maior
    checkSensors();

    if ((b_sensor[0] == 1)) {
      motors.forwardTime(200 - 20);
      checkSensors();

      if ((b_sensor[0] == 1) && (b_sensor[4] == 1)) {
        done();
      }
      else {
        turnLeft();
        return;
      }
    }
    motors.forwardTime(200 - 20);
    checkSensors();
    if (b_sensor[0] == 0 && b_sensor[1] == 0 &&
        b_sensor[3] == 0 && b_sensor[4] == 0 && b_sensor[2] == 0) {
      turnRight();
      return;
    }
    path[pathLength] = 'S';
    // Serial.println("s");
    pathLength++;
    //Serial.print("Path length: ");
    //Serial.println(pathLength);
    if (path[pathLength - 2] == 'B') {
      //Serial.println("shortening path");
      shortPath();
    }
    straight();
  }

  //gira 360
  motors.forwardTime(80);
  motors.stop();
  checkSensors();
  if ((b_sensor[0] == 0) && (b_sensor[1] == 0) && (b_sensor[2] == 0) && (b_sensor[3] == 0) && (b_sensor[4] == 0)) {
    turnAround();

  }


}
//**********************************************************************************************************************************************
void done() {
  motors.stop();
  replaystage = 1;
  path[pathLength] = 'D';
  pathLength++;
  checkSensors();
  while ((b_sensor[0] == 1)) {
    digitalWrite(led, LOW);
    delay(150);
    digitalWrite(led, HIGH);
    delay(150);
    checkSensors();
  }
  delay(500);
  replay();
}
//************************************************************************************************************************************************
void replay() {

  checkSensors();
  if ((b_sensor[0] == 0) && (b_sensor[4] == 0)) {
    error = 0;
    straight();
  }
  else {
    if (path[readLength] == 'D') {
      motors.forwardTime(100);
      motors.stop();
      endMotion();
    }
    if (path[readLength] == 'L') {
      motors.forwardTime(200);//leap time
      turnLeft();
    }
    if (path[readLength] == 'R') {
      motors.forwardTime(200);//leap time
      turnRight();
    }
    if (path[readLength] == 'S') {
      motors.forwardTime(200);//leap time
      error = 0;
      straight();
    }

    readLength++;
  }

  replay();

}

//*************************************************************************************************************************************************
void straight() {

  read_sensor_values();
  // Serial.println(error);
  calculate_pid();
  motor_control();

}
//**************************************************************************************************************************************************
void endMotion() {
  digitalWrite(led, LOW);
  delay(500);
  digitalWrite(led, HIGH);
  delay(200);
  digitalWrite(led, LOW);
  delay(200);
  digitalWrite(led, HIGH);
  delay(500);
  endMotion();
}
//***************************************************************************************************************************************************
void turnLeft() {
  digitalWrite(ledLeftTurn, HIGH);

  checkSensors();

  while ((b_sensor[1] == 1) || (b_sensor[2] == 1) ) {
    motors.speedLeft(velNeg);
    motors.speedRight(velPos);
    delay(2);
    motors.stop();
    delay(1);
    checkSensors();

  }
  //delay(200);
  checkSensors();
  while ((b_sensor[2] == 0)) {
    motors.speedLeft(velNeg);
    motors.speedRight(velPos);
    delay(2);
    motors.stop();
    delay(1);
    checkSensors();
  }
  error = 0.5;
  if (replaystage == 0) {
    path[pathLength] = 'L';
    //Serial.println("l");
    pathLength++;
    //Serial.print("Path length: ");
    //Serial.println(pathLength);
    if (path[pathLength - 2] == 'B') {
      //Serial.println("shortening path");
      shortPath();//tem que fazer
    }
    digitalWrite(ledLeftTurn, LOW);
  }
}
//***********************************************************************************************************************************************
void turnRight() {
  digitalWrite(ledRightTurn, HIGH);

  checkSensors();

  //testar sem b2
  while ((b_sensor[3] == 1) || (b_sensor[2] == 1)) {
    motors.speedLeft(velPos);
    motors.speedRight(velNeg);
    delay(2);
    motors.stop();
    delay(1);
    checkSensors();
  }

  //delay(200);
  checkSensors();
  while ((b_sensor[2] == 0) ) {
    motors.speedLeft(velPos);
    motors.speedRight(velNeg);
    delay(2);
    motors.stop();
    delay(1);
    checkSensors();
  }

  error = -0.5;

  if (replaystage == 0) {
    path[pathLength] = 'R';
    Serial.println("r");
    pathLength++;
    Serial.print("Path length: ");
    Serial.println(pathLength);
    if (path[pathLength - 2] == 'B') {
      Serial.println("shortening path");
      shortPath();
    }
    digitalWrite(ledRightTurn, LOW);
  }

}
//********************************************************************************************************************************************************
void shortPath() {
  int shortDone = 0;
  if (path[pathLength - 3] == 'L' && path[pathLength - 1] == 'R') {
    pathLength -= 3;
    path[pathLength] = 'B';
    //Serial.println("test1");
    shortDone = 1;
  }

  if (path[pathLength - 3] == 'L' && path[pathLength - 1] == 'S' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'R';
    //Serial.println("test2");
    shortDone = 1;
  }

  if (path[pathLength - 3] == 'R' && path[pathLength - 1] == 'L' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'B';
    //Serial.println("test3");
    shortDone = 1;
  }


  if (path[pathLength - 3] == 'S' && path[pathLength - 1] == 'L' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'R';
    //Serial.println("test4");
    shortDone = 1;
  }

  if (path[pathLength - 3] == 'S' && path[pathLength - 1] == 'S' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'B';
    //Serial.println("test5");
    shortDone = 1;
  }
  if (path[pathLength - 3] == 'L' && path[pathLength - 1] == 'L' && shortDone == 0) {
    pathLength -= 3;
    path[pathLength] = 'S';
    //Serial.println("test6");
    shortDone = 1;
  }

  path[pathLength + 1] = 'D';
  path[pathLength + 2] = 'D';
  pathLength++;
  //Serial.print("Path length: ");
  //Serial.println(pathLength);
  //printPath();
}
//********************************************************************************************************************************************
void turnAround() {
  motors.forwardTime(120);//leap time
  checkSensors();
  motors.stop();
  delay(200);
  while ((b_sensor[2] == 0) ) {
    digitalWrite(ledRightTurn, HIGH);
    digitalWrite(SPEAKER_OUT, HIGH);
    motors.speedLeft(velNeg);
    motors.speedRight(velPos);
    delay(2);
    motors.stop();
    delay(1);
    checkSensors();
  }
  error = -0.5;
  digitalWrite(ledRightTurn, LOW);
  digitalWrite(SPEAKER_OUT, LOW);
  path[pathLength] = 'B';
  pathLength++;
  straight();
  //Serial.println("b");
  //Serial.print("Path length: ");
  //Serial.println(pathLength);
}
//*************************************************************************************************************************************************
void printPath() {
  Serial.println("+++++++++++++++++");
  int x;
  while (x <= pathLength) {
    Serial.println(path[x]);
    x++;
  }
  Serial.println("+++++++++++++++++");
}


